diff --git a/node_modules/react-native-video-trim/android/build/tmp/compileDebugJavaWithJavac/previous-compilation-data.bin b/node_modules/react-native-video-trim/android/build/tmp/compileDebugJavaWithJavac/previous-compilation-data.bin
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-video-trim/android/src/main/java/com/videotrim/utils/StorageUtil.java b/node_modules/react-native-video-trim/android/src/main/java/com/videotrim/utils/StorageUtil.java
index b39d6cd..4def783 100644
--- a/node_modules/react-native-video-trim/android/src/main/java/com/videotrim/utils/StorageUtil.java
+++ b/node_modules/react-native-video-trim/android/src/main/java/com/videotrim/utils/StorageUtil.java
@@ -15,13 +15,20 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.nio.file.Paths; 
 import java.util.ArrayList;
 import java.util.List;
 
 public class StorageUtil {
-  public static String getOutputPath(Context context) { // use same extension as inputFile
+  public static String getOutputPath(Context context, String surcePath) { // use same extension as inputFile
     long timestamp = System.currentTimeMillis() / 1000;
-    File file = new File(context.getFilesDir(), VideoTrimmerUtil.FILE_PREFIX + "_" + timestamp + ".mp4"); // always use mp4 to prevent any issue with ffmpeg
+
+    String[] parts = Paths.get(surcePath).getFileName().toString().split("\\.");
+
+    String extension  = parts[parts.length - 1].toLowerCase();
+
+    String extString = extension == "mov" ? "MOV": "mp4";
+    File file = new File(context.getFilesDir(), VideoTrimmerUtil.FILE_PREFIX + "_" + timestamp + "." + extString); // always use mp4 to prevent any issue with ffmpeg
     return file.getAbsolutePath();
   }
 
diff --git a/node_modules/react-native-video-trim/android/src/main/java/com/videotrim/widgets/VideoTrimmerView.java b/node_modules/react-native-video-trim/android/src/main/java/com/videotrim/widgets/VideoTrimmerView.java
index 3653d4d..ca2d7ed 100644
--- a/node_modules/react-native-video-trim/android/src/main/java/com/videotrim/widgets/VideoTrimmerView.java
+++ b/node_modules/react-native-video-trim/android/src/main/java/com/videotrim/widgets/VideoTrimmerView.java
@@ -271,9 +271,10 @@ public class VideoTrimmerView extends FrameLayout implements IVideoTrimmerView {
       Toast.makeText(mContext, "Video shorter than 3s, can't proceed", Toast.LENGTH_SHORT).show();
     } else {
       mVideoView.pause();
+      String surcePath = mSourceUri.getPath();
       VideoTrimmerUtil.trim(
-        mSourceUri.getPath(),
-        StorageUtil.getOutputPath(mContext),
+        surcePath,
+        StorageUtil.getOutputPath(mContext, surcePath),
         mDuration,
         mLeftProgressPos,
         mRightProgressPos,
@@ -281,6 +282,7 @@ public class VideoTrimmerView extends FrameLayout implements IVideoTrimmerView {
     }
   }
 
+
   private void seekTo(long msec) {
     mVideoView.seekTo((int) msec);
   }
diff --git a/node_modules/react-native-video-trim/ios/VideoTrim.swift b/node_modules/react-native-video-trim/ios/VideoTrim.swift
index 722383f..eab692e 100644
--- a/node_modules/react-native-video-trim/ios/VideoTrim.swift
+++ b/node_modules/react-native-video-trim/ios/VideoTrim.swift
@@ -277,7 +277,8 @@ class VideoTrim: RCTEventEmitter {
     @available(iOS 13.0, *)
     private func trim(viewController: VideoTrimmerViewController, inputFile: URL, videoDuration: Double, startTime: Double, endTime: Double) {
         let timestamp = Int(Date().timeIntervalSince1970)
-        let outputName = "\(FILE_PREFIX)_\(timestamp).mp4" // use mp4 to prevent any issue with ffmpeg about file extension
+        let ext = inputFile.pathExtension.lowercased() == "mov" ? "MOV": "mp4"
+        let outputName = "\(FILE_PREFIX)_\(timestamp).\(ext)" // use mp4 to prevent any issue with ffmpeg about file extension
         let outputFile = "\(inputFile.deletingLastPathComponent().absoluteURL)\(outputName)"
         let cmd = "-i \(inputFile) -ss \(startTime * 1000)ms -to \(endTime * 1000)ms -c copy \(outputFile)";
                 
diff --git a/node_modules/react-native-video-trim/ios/VideoTrimmer.swift b/node_modules/react-native-video-trim/ios/VideoTrimmer.swift
index f9cf3c4..9f81278 100644
--- a/node_modules/react-native-video-trim/ios/VideoTrimmer.swift
+++ b/node_modules/react-native-video-trim/ios/VideoTrimmer.swift
@@ -554,6 +554,7 @@ import AVFoundation
 
 
     @objc private func leadingGrabberPanned(_ sender: UILongPressGestureRecognizer) {
+        
         switch sender.state {
             case .began:
                 trimmingState = .leading
@@ -562,10 +563,23 @@ import AVFoundation
                 startPanning()
 
             case .changed:
+                let rengeDiff = selectedRange.end - selectedRange.start
+            
+         
                 let location = sender.location(in: self)
                 var time = timeForLocation(location.x + grabberOffset)
-                let newDuration = CMTimeSubtract(selectedRange.end, time)
-                let newRange = CMTimeRange(start: time, end: selectedRange.end)
+//                var canGoBack = CMTimeCompare(rengeDiff, maximumDuration) == -1
+                
+                let onEnd = (range.end.seconds - selectedRange.end.seconds) <= 1.0
+                
+                let canGoForward =  CMTimeCompare(time,selectedRange.start ) == 1
+
+                let shouldResize = (onEnd  && canGoForward)
+                
+                let newDuration = shouldResize ?  CMTimeSubtract(selectedRange.end, time) : rengeDiff
+                let newRange = CMTimeRange(start: time, end: shouldResize ? selectedRange.end : time +  rengeDiff)
+                
+
             
                 if CMTimeCompare(newRange.duration, maximumDuration) == 1 {
                     return
@@ -575,6 +589,15 @@ import AVFoundation
                     return
                 }
                 
+              
+                if(!shouldResize) {
+                    if CMTimeCompare(newRange.end, range.duration) == 1 { // prevent endTime to be greater than video endTime
+                        return
+                    }
+                }
+              
+
+
                 var didClamp = false
                 if CMTimeCompare(newDuration, minimumDuration) == -1 {
                     time = CMTimeSubtract(selectedRange.end, minimumDuration)
@@ -589,6 +612,15 @@ import AVFoundation
                     didClamp = true
                 }
                 
+                if(!shouldResize) {
+                    if CMTimeCompare(newDuration, minimumDuration) == -1 {
+                        time = CMTimeAdd(selectedRange.start, minimumDuration)
+                        didClamp = true
+                    }
+                }
+                
+            
+
 
                 if didClamp == true && didClamp != didClampWhilePanning {
                     impactFeedbackGenerator?.impactOccurred()
@@ -620,6 +652,8 @@ import AVFoundation
         }
     }
     
+
+
     @objc private func trailingGrabberPanned(_ sender: UILongPressGestureRecognizer) {
         switch sender.state {
             case .began:
